---
title: "Appendix S3. Extended multievent model: Arnason-Schwarz without the robust design"
author: | 
  | Matthijs Hollanders & J. Andrew Royle
  |
  | Manuscript title: Know what you don't know: Embracing state uncertainty in disease-structured multistate models
format:
  pdf:
    toc: true
editor_options:
  chunk_output_type: console
bibliography: multievent.bib
csl: methods-in-ecology-and-evolution.csl
nocite: |
  @wickham2016, @pederson2020
geometry: margin = 1in
fontsize: 10pt
execute:
  output: false
  warning: false
  message: false
header-includes: |
  \usepackage{titling}
  \pretitle{\begin{flushleft}\Large\bfseries}
  \posttitle{\end{flushleft}}  
  \preauthor{\begin{flushleft}\large}
  \postauthor{\end{flushleft}}
  \usepackage{blkarray}
  \usepackage{multirow}
---

```{r}
#| echo: false

options(scipen = 999, digits = 3)
```

\newpage

# Introduction

In the first section, we simulate multievent mark-recapture Arnason-Schwarz [@arnason1972; @arnason1973; @schwarz1993; @pradel2005] data for animals with two pathogen infection states using R 4.2.0 [@rcoreteam2022]. We simulate the ecological process, consisting of survival and infection state transitions, in discrete-time. The observation process is simulated with single surveys instead of the robust design. During each survey, multiple samples (e.g., swabs) are collected from individuals to detect the pathogen, which happens imperfectly. Each sample is subjected to multiple diagnostic runs (e.g., qPCR), which also features imperfect pathogen detection, yielding infection status (binary) and infection intensity (continuous) data.

This model differs from the robust design formulation in that the *observation process* of the robust design, consisting of both the recapture and the sampling pathogen detection probabilities, is now split into two separate processes (note that matrix multiplication of the two transition probability matrices [TPMs] below yields the observation process of the robust design). First, there is the recapture process where the observed state ($o$) of individual $i$ during survey $t$ is conditional on the ecological state ($z_{it}$):

```{=tex}
\begin{center}
  \begin{blockarray}{l *{3}{c} l l}
    & \BAmulticolumn{3}{c}{$o_{it}$} & & \\
    & Seen, \textit{Bd}-- & Seen, \textit{Bd}+ & Not seen & & \\
    \begin{block}{l ( *{3}{c} ) l l}
    \multirow{3}{*}{$o_{it}|z_{it} \sim \operatorname{Categorical}$} & $p_1$ & $0$ & $1-p_1$ & Alive, \textit{Bd}-- & \multirow{3}{*}{$z_{it}$} \\
    & $0$ & $p_2$ & $1-p_2$ & Alive, \textit{Bd}+ & \\
    & $0$ & $0$ & $1$ & Dead & \\
  \end{blockarray}
\end{center}
```

Then in the sampling process, the sample state ($s$) of individual $i$, survey $t$, and replicate sample $k$ is conditional on the observed state:

```{=tex}
\begin{center}
  \begin{blockarray}{l *{3}{c} l l}
    & \BAmulticolumn{3}{c}{$s_{itk}$} & & \\
    & Sample \textit{Bd}-- & Sample \textit{Bd}+ & Not sampled & & \\
    \begin{block}{l ( *{3}{c} ) l l}
    \multirow{3}{*}{$s_{itk}|o_{it} \sim \operatorname{Categorical}$} & $1-\delta_{21}$ & $\delta_{21}$ & $0$ & Seen, \textit{Bd}-- & \multirow{3}{*}{$o_{it}$} \\
    & $1-\delta_{22}$ & $\delta_{22}$ & $0$ & Seen, \textit{Bd}+ & \\
    & $0$ & $0$ & $1$ & Not seen & \\
  \end{blockarray}
\end{center}
```

In the second section, we demonstrate how to analyze datasets with Bayesian inference and Markov chain Monte Carlo (MCMC) methods using NIMBLE 0.12.3 [@devalpine2017; @devalpine2022]. We write the model code in the NIMBLE dialect of the BUGS language (which is easily adapted to work in BUGS or JAGS), generate suitable initial values for latent ecological, observed, and sample states, and condense the diagnostic run infection intensities to "long" format. We then run the MCMC, show traceplots and summary statistics, and plot the parameter estimates with the simulated values. 

We created this document with the intention to show that the observation process with single surveys is unable to recover input parameter values, unlike the robust design. We postulate that the model structure has issues with identifiability and/or multimodality.

\newpage

# Simulating data

We simulate individuals experiencing changes in their in ecological states (*z*), observed states (*o*) conditional on these ecological states, sample states (*s*) from each recaptured individual, and diagnostic run states (*y*) conditional on the sample states. Ecological states (*z*) are (1) alive and uninfected, (2) alive and infected, and (3) dead [@kery2012b]. Individuals can transition between these states, represented by survival (conditional on infection intensity) and infection state transitions. Observed states (*o*) are (1) seen/captured while uninfected, (2) seen/captured while infected, (3) and not seen/captured. Sample states (*s*) are (1) sample uninfected, (2) sample infected, and (3) no sample, the last of which is only possible when the individual was not captured. For every sample, multiple diagnostic runs are conducted which let us estimate the probability of detecting an infection on an infected sample. There are three diagnostic run states (*y*): (1) uninfected, (2) infected, and (3) no diagnostic run, the last of which is only possible when there is no sample collected and therefore no capture of an individual. Pathogen detection probabilities on samples and diagnostic runs are modeled with occupancy-like submodels [multiple sample units with replicated measurements, @mackenzie2002] conditional on infection intensity. We simulate the occurrence of false-positives in both the sampling and diagnostic processes.

## Input parameters

We specify the sampling condition and define parameter values for the simulation. 

```{r}
# Number of ecological (z), observed (o), sample (s), and diagnostic (y) states
n.states <- 3

# Sampling conditions
n.ind <- 200        # Number of individuals in simulation
n.surv <- 8         # Number of survey occasions   
n.samp <- 3         # Number of samples collected (per capture)
n.diag <- 3         # Number of diagnostic runs (per sample)

# Parameters
pi <- 0.4           # Probability of entering the study as infected
phi1 <- 0.9         # Survival probability if uninfected
phi2.alpha <- 0.9   # Survival probability if infected (intercept)
phi.beta <- -0.5    # Effect of one "unit" of pathogen on survival (log odds)
psi12 <- 0.6        # Probability of gaining infection
psi21 <- 0.3        # Probability of clearing infection
p1 <- 0.6           # Recapture probability if uninfected
p2 <- 0.7           # Recapture probability if infected
r.delta <- 0.4      # Probability of detecting one "unit" of pathogen on a sample
delta21 <- 0.05     # False-positive probability of sampling process (e.g., swab)
r.lambda <- 0.6     # Probability of detecting one "unit" of pathogen on a diagnostic run 
lambda21 <- 0.10    # False-positive probability of diagnostic process (e.g., qPCR)
mu <- 4             # Average population infection intensity
mu.sigma <-         # Population, sampling process, and diagnostic process infection 
  c(0.4, 0.3, 0.2)  # intensity standard deviations
```

## Transition probability matrices

We start with creating the TPMs of the ecological, observation, sampling, and diagnostic processes. We simulate the survival probability of infected individuals (${\phi_2}_{it}$) as a logit-linear function of infection intensity, and the pathogen detection probabilities (${\delta_{22}}_{it}$ and ${\lambda_{22}}_{it}$) following abundance-induced heterogeneity models [@royle2003; @lachish2012]. Note that, because Arnason-Schwarz models condition on first capture, we do not model the capture probabilities within the survey that an individual was first caught. 

```{r}
# Arrays for ecological, observation, sampling, and diagnostic process TPMs
TPM.z <- TPM.o <- array(NA, c(n.states, n.states, n.ind, n.surv - 1))
TPM.s <- array(NA, c(n.states, n.states, n.ind, n.surv))
TPM.d <- array(NA, c(n.states, n.states, n.ind, n.surv, n.samp))

# Arrays for mortality, pathogen detection, and infection intensities
phi2 <- array(NA, c(n.ind, n.surv - 1))
m <- delta22 <- array(NA, c(n.ind, n.surv))
n <- lambda22 <- array(NA, c(n.ind, n.surv, n.samp))

# Primary occasion that individuals were first captured
first <- sort(sample(1:(n.surv - 1), n.ind, replace = T))

# TPMs
for (i in 1:n.ind) {
  for (t in first[i]:n.surv) {
    
    # Individual infection intensity (lognormal)
    m[i,t] <- rlnorm(1, log(mu), mu.sigma[1])
    
  } # t
  
  for (t in first[i]:(n.surv - 1)) {
    
    # Survival probability as a function of infection intensity
    phi2[i,t] <- plogis(qlogis(phi2.alpha) + phi.beta * m[i,t])
    
    # Ecological process TPM
    TPM.z[,,i,t] <- 
      matrix(c(phi1 * (1 - psi12), phi1 * psi12,            1 - phi1,
               phi2[i,t] * psi21,  phi2[i,t] * (1 - psi21), 1 - phi2[i,t],
               0,                  0,                       1),
             nrow = n.states, ncol = n.states, byrow = T)
    
    # Observation process TPM
    TPM.o[,,i,t] <- 
      matrix(c(p1, 0,  1 - p1,
               0,  p2, 1 - p2,
               0,  0,  1), 
             nrow = n.states, ncol = n.states, byrow = T)

  } # t
  
  for (t in first[i]:n.surv) {
    
    # Sample pathogen detection
    delta22[i,t] <- 1 - (1 - r.delta) ^ m[i,t]
    
    # Sampling process TPM
    TPM.s[,,i,t] <-
    matrix(c(1 - delta21,      delta21,      0,
             1 - delta22[i,t], delta22[i,t], 0,
             0,                0,            1),
           nrow = n.states, ncol = n.states, byrow = T)
    
    for (k in 1:n.samp) {
      
      # Sample infection intensity
      n[i,t,k] <- rnorm(1, m[i,t], mu.sigma[2])
      
      # Diagnostic pathogen detection
      lambda22[i,t,k] <- 1 - (1 - r.lambda) ^ n[i,t,k]
      
      # Diagnostic process TPM
      TPM.d[,,i,t,k] <- 
        matrix(c(1 - lambda21,        lambda21,        0,
                 1 - lambda22[i,t,k], lambda22[i,t,k], 0,
                 0,                   0,               1), 
               nrow = n.states, ncol = n.states, byrow = T)

    } # k
  } # t
} # i
```

## Generating capture histories

We run the simulation, which yields the 4-dimensional capture histories (*y*) and associated infection intensities (*x*) that we use as data for the model.

```{r}
# Arrays for ecological, observed, sample, and diagnostic states, and infection intensities
z <- o <- array(NA, c(n.ind, n.surv))
s <- array(NA, c(n.ind, n.surv, n.samp))
y <- x <- array(NA, c(n.ind, n.surv, n.samp, n.diag))

# We start using NIMBLE's functionality here with the rcat() function
library(nimble)

# Simulation
for (i in 1:n.ind) {
  
  # Ecological and observed state at first capture
  z[i,first[i]] <- o[i,first[i]] <- rcat(1, c(1 - pi, pi))
  
  for (t in (first[i] + 1):n.surv) {
    
    # Ecological process
    z[i,t] <- rcat(1, TPM.z[z[i,t-1],,i,t-1])
    
    # Observation process
    o[i,t] <- rcat(1, TPM.o[z[i,t],,i,t-1])

  } # t
  
  for (t in first[i]:n.surv) {
    for (k in 1:n.samp) {
      
      # Sampling process
      s[i,t,k] <- rcat(1, TPM.s[o[i,t],,i,t])
      
      for (l in 1:n.diag) {
        
        # Diagnostic process
        y[i,t,k,l] <- rcat(1, TPM.d[s[i,t,k],,i,t,k])
        
        # Diagnostic run infection intensity
        if (y[i,t,k,l] == 2) {
          x[i,t,k,l] <- rnorm(1, n[i,t,k], mu.sigma[3])
        }
        
      } # l
    } # k
  } # t
} # i
```

\newpage

# Extended multievent model

## Model code

We write the model code using NIMBLE. We specify vague Beta and weakly informative (half-)Cauchy priors for parameters, define functions for model parameters, write out the TPMs, specify the likelihood for the multievent model, and use "long" format without NAs for the infection intensity model. We use a mix of centered and non-centered parameterization for modeling infection intensities to improve MCMC mixing [@papaspiliopoulos2003]. Note that all parameters can be modeled as functions of covariates with appropriate link functions.

```{r}
MEcode <- nimbleCode({
  
  # PRIORS
  
  # Constrain false-positive and true-positive probabilities to avoid multimodality
  constraint ~ dconstraint(delta21 < r.delta & lambda21 < r.lambda)
  
  # Multievent
  pi.alpha ~ dbeta(1, 1)
  phi1.alpha ~ dbeta(1, 1)
  phi2.alpha ~ dbeta(1, 1)
  phi.beta ~ dt(0, sigma = 1, df = 1)
  psi12.alpha ~ dbeta(1, 1)
  psi21.alpha ~ dbeta(1, 1)
  p1.alpha ~ dbeta(1, 1)
  p2.alpha ~ dbeta(1, 1)
  r.delta ~ dbeta(1, 1)
  delta21 ~ dbeta(1, 1)  
  r.lambda ~ dbeta(1, 1)
  lambda21 ~ dbeta(1, 1)  
  
  # Infection intensity
  mu.alpha ~ dt(mu.prior, sigma = 1, df = 1)
  for (i in 1:3) {
    mu.sigma[i] ~ T(dt(0, sigma = 1, df = 1), 0, )
  }
  
  # PARAMETERS
    
  for (i in 1:n.ind) {
    
    # Probability of entering as infected
    pi[i] <- pi.alpha
    
    for (t in first[i]:(n.surv - 1)) {
      
      # Mortality hazard rates
      phi1[i,t] <- phi1.alpha
      logit(phi2[i,t]) <- logit(phi2.alpha) + phi.beta * m[i,t]
      
      # Infection state transition hazard rates
      psi12[i,t] <- psi12.alpha
      psi21[i,t] <- psi21.alpha
      
      # Recapture probabilities
      p1[i,t+1] <- p1.alpha
      p2[i,t+1] <- p2.alpha
      
    } # t
      
    # Recapture probabilities at first capture
    p1[i,first[i]] <- 1
    p2[i,first[i]] <- 1
    
    for (t in first[i]:n.surv) {
      
      # Population infection intensity
      mu[i,t] <- mu.alpha
      
      # Individual infection intensity (lognormal)
      m[i,t] ~ dlnorm(mu[i,t], sdlog = mu.sigma[1])     # Centered parameterization
#      m.z[i,t] ~ dnorm(0, 1)
#      log(m[i,t]) <- mu[i,t] + m.z[i,t] * mu.sigma[1]  # Non-centered parameterization
      
      # Sample pathogen detection
      delta22[i,t] <- 1 - (1 - r.delta) ^ m[i,t]
      
      for (k in 1:n.samp) {
        
        # Sample infection intensity
#        n[i,t,k] ~ dnorm(m[i,t], sd = mu.sigma[2])    # Centered parameterization
        n.z[i,t,k] ~ dnorm(0, 1)
        n[i,t,k] <- m[i,t] + n.z[i,t,k] * mu.sigma[2]  # Non-centered parameterization
        
        # Diagnostic pathogen detection
        lambda22[i,t,k] <- 1 - (1 - r.lambda) ^ n[i,t,k]
        
      } # k
    } # t
    
    # TRANSITION PROBABILITY MATRICES
    
    # ECOLOGICAL PROCESS (survival and infection state transitions)
    
    # First capture
    TPM.z.first[1,i] <- 1 - pi[i]  # Enters as uninfected
    TPM.z.first[2,i] <- pi[i]      # Enters as infected
    
    for (t in first[i]:(n.surv - 1)) {
      
      # Alive, uninfected
      TPM.z[1,1,i,t] <- phi1[i,t] * (1 - psi12[i,t])  # Remains uninfected
      TPM.z[1,2,i,t] <- phi1[i,t] * psi12[i,t]        # Transitions to infected
      TPM.z[1,3,i,t] <- 1 - phi1[i,t]                 # Dies
      
      # Alive, infected
      TPM.z[2,1,i,t] <- phi2[i,t] * psi21[i,t]        # Transitions to uninfected
      TPM.z[2,2,i,t] <- phi2[i,t] * (1 - psi21[i,t])  # Remains infected
      TPM.z[2,3,i,t] <- 1 - phi2[i,t]                 # Dies
      
      # Dead
      TPM.z[3,1,i,t] <- 0                             # Transitions to uninfected
      TPM.z[3,2,i,t] <- 0                             # Transitions to infected 
      TPM.z[3,3,i,t] <- 1                             # Remains dead

    } # t
    
    for (t in first[i]:n.surv) {
      
      # OBSERVATION PROCESS (recapture)
        
      # Alive, uninfected
      TPM.o[1,1,i,t] <- p1[i,t]      # Seen, uninfected
      TPM.o[1,2,i,t] <- 0            # Seen, infected
      TPM.o[1,3,i,t] <- 1 - p1[i,t]  # Not seen
      
      # Alive, infected
      TPM.o[2,1,i,t] <- 0            # Seen, uninfected
      TPM.o[2,2,i,t] <- p2[i,t]      # Seen, infected
      TPM.o[2,3,i,t] <- 1 - p2[i,t]  # Not seen
      
      # Dead
      TPM.o[3,1,i,t] <- 0            # Seen, uninfected
      TPM.o[3,2,i,t] <- 0            # Seen, infected
      TPM.o[3,3,i,t] <- 1            # Not seen
              
      # SAMPLING PROCESS (sample pathogen detection)
      
      # Seen, uninfected
      TPM.s[1,1,i,t] <- 1 - delta21       # Sample uninfected (true -)
      TPM.s[1,2,i,t] <- delta21           # Sample infected (false +)
      TPM.s[1,3,i,t] <- 0                 # Not sampled
      
      # Seen, infected
      TPM.s[2,1,i,t] <- 1 - delta22[i,t]  # Sample uninfected (false -)
      TPM.s[2,2,i,t] <- delta22[i,t]      # Sample infected (true +)
      TPM.s[2,3,i,t] <- 0                 # Not sampled
      
      # Not seen
      TPM.s[3,1,i,t] <- 0                 # Sample uninfected
      TPM.s[3,2,i,t] <- 0                 # Sample infected
      TPM.s[3,3,i,t] <- 1                 # Not sampled
        
      for (k in 1:n.samp) {
        
        # DIAGNOSTIC PROCESS (diagnostic pathogen detection)
        
        # Sample uninfected
        TPM.d[1,1,i,t,k] <- 1 - lambda21         # Uninfected (true -)
        TPM.d[1,2,i,t,k] <- lambda21             # Infected (false +)
        TPM.d[1,3,i,t,k] <- 0                    # No diagnostic run
        
        # Sample infected
        TPM.d[2,1,i,t,k] <- 1 - lambda22[i,t,k]  # Uninfected (false -)
        TPM.d[2,2,i,t,k] <- lambda22[i,t,k]      # Infected (true +)
        TPM.d[2,3,i,t,k] <- 0                    # No diagnostic run
        
        # Not sampled
        TPM.d[3,1,i,t,k] <- 0                    # Uninfected
        TPM.d[3,2,i,t,k] <- 0                    # Infected
        TPM.d[3,3,i,t,k] <- 1                    # No diagnostic run 
        
      } # k
    } # t
    
    # LIKELIHOOD
    
    # Ecological state at first capture
    z[i,first[i]] ~ dcat(TPM.z.first[1:2,i])

    for (t in (first[i] + 1):n.surv) {
      
      # Ecological process
      z[i,t] ~ dcat(TPM.z[z[i,t-1],1:3,i,t-1])

    } # t
    
    for (t in first[i]:n.surv) {
      
      # Observation process
      o[i,t] ~ dcat(TPM.o[z[i,t],1:3,i,t])
      
      for (k in 1:n.samp) {  
        
        # Sampling process
        s[i,t,k] ~ dcat(TPM.s[o[i,t],1:3,i,t])
        
        for (l in 1:n.diag) {
          
          # Diagnostic process
          y[i,t,k,l] ~ dcat(TPM.d[s[i,t,k],1:3,i,t,k])
          
        } # l
      } # k
    } # t
  } # i
  
  # INFECTION INTENSITY
  
  for (j in 1:n.x) {

    # Likelihood
    x[j] ~ dnorm(n[ind[j],surv[j],samp[j]], sd = mu.sigma[3])
    
  }
  
})
```

## Initial values for latent ecological and observed states

We generate suitable initial values for latent ecological (*z*), observed (*o*), and sample (*s*) states from our diagnostic capture history (*y*).

```{r}
# Lowest observed state per individual per primary
observed <- apply(y, 1:2, function(x) min(x, na.rm = T))

# First and last captures
first.cap <- apply(observed, 1, function(x) min(which(x < 3)))
last.cap <- apply(observed, 1, function(x) max(which(x < 3)))

# Sample states
s.init <- array(NA, c(n.ind, n.surv, n.samp))
for (i in 1:n.ind) {
  for (t in first.cap[i]:n.surv) {
    for (k in 1:n.samp) {
      s.init[i,t,k] <- 
        # If missing survey, sample is "not sampled"
        ifelse(length(which(is.na(y[i,t,k,]))) == n.diag, 3,
               # If no diagnostic runs, sample is "not sampled"
               ifelse(min(y[i,t,k,], na.rm = T) == 3, 3,
                      # Otherwise, assign highest observed diagnostic state
                      max(y[i,t,k,][y[i,t,k,] < 3], na.rm = T)))
    } # k
  } # t
} # i

# Observed and ecological states
o.init <- z.init <- array(NA, c(n.ind, n.surv))
for (i in 1:n.ind) {
  for (t in first.cap[i]:last.cap[i]) {
    # If not captured during survey
    if (min(s.init[i,t,]) == 3) {
      o.init[i,t] <- 3               # "Not captured"         
      z.init[i,t] <- sample(1:2, 1)  # Randomly assign alive state 
    } else {
      # If captured, assign highest sample state
      o.init[i,t] <- z.init[i,t] <- max(s.init[i,t,][s.init[i,t,] < 3])
    }
  } # t
  # If not captured during the last survey
  if (last.cap[i] < n.surv) {
    # Assign "not captured" or "dead" state after last capture
    for (t in (last.cap[i] + 1):n.surv) {
      o.init[i,t] <- z.init[i,t] <- 3
    } # t
  }
} # i
```

## Composing infection intensity data

We convert our 4-dimensional infection intensity array (*x*) into tidy ("long") format without NAs to improve MCMC mixing and speed.

```{r}
x.long <- 
  reshape2::melt(x,
                 value.name = "x", 
                 varnames = c("ind", "surv", "samp", "diag")) |>
  na.omit()
```

## Data, constants, initial values, and parameters to monitor

We package the data, constants, initial values, and parameters to monitor to feed to NIMBLE.

```{r}
#| output: true

# Data
str(MEdata <- list(y = y,
                   x = x.long$x,
                   constraint = 1))

# Constants
mu.prior <- mean(log(x), na.rm = T)
str(MEconsts <- list(# Multievent
                     n.ind = dim(y)[1],
                     n.surv = dim(y)[2],
                     n.samp = dim(y)[3],
                     n.diag = dim(y)[4],
                     first = first.cap,
                     
                     # Infection intensity
                     n.x = nrow(x.long),
                     ind = x.long$ind,
                     surv = x.long$surv,
                     samp = x.long$samp,
                     mu.prior = mu.prior))

# Initial values for latent states, pathogen detection, and infection intensity
MEinits <- list(z = z.init, o = o.init, s = s.init,
                r.delta = runif(1, 0.5, 1), delta21 = runif(1, 0, 0.5),
                r.lambda = runif(1, 0.5, 1), lambda21 = runif(1, 0, 0.5),
                mu.alpha = mu.prior, mu.sigma = runif(3))

# Parameters to monitor
MEmons <- c("pi.alpha", "phi1.alpha", "phi2.alpha", "phi.beta", 
            "psi12.alpha", "psi21.alpha", "p1.alpha", "p2.alpha", 
            "r.delta", "delta21", "r.lambda", "lambda21",
            "mu.alpha", "mu.sigma")
```

## Run model

We run the model with NIMBLE's default MCMC configuration.

```{r}
MEstart <- Sys.time()
# Model
MEmodel <- nimbleModel(MEcode, MEconsts, MEdata, MEinits, calculate = F, check = F)
cMEmodel <- compileNimble(MEmodel)

# MCMC
MEconf <- configureMCMC(MEmodel, monitors = MEmons)
MEmcmc <- buildMCMC(MEconf)
cMEmcmc <- compileNimble(MEmcmc, project = cMEmodel)

# Run MCMC
n.chains <- 3 ; n.iter <- 5000 ; n.burnin <- 1000
MEsamples <- runMCMC(cMEmcmc, nchains = n.chains, niter = n.iter)
MEend <- Sys.time()
```

```{r}
#| output: true

MEend - MEstart
```

\newpage

# Results

## Traceplots and summary statistics

We see that parameters mix fairly well and that convergence is achieved quickly [@youngflesh2018mcmcvis], but that parameters are not recovered properly. Additionally, the recapture and state transition probabilities have considerable percent overlap between the prior and posterior distributions (PPO), suggestive of identifiability issues [@gimenez2009]. The red horizontal lines in the density plots are Beta(1, 1) priors, which were used for all probabilities, and the red dashed lines mark the simulation input parameter values. 

```{r}
#| output: true

# Parameters
params <- c(pi, phi1, phi2.alpha, phi.beta, psi12, psi21, p1, p2, 
            r.delta, delta21, r.lambda, lambda21, log(mu), mu.sigma)

# Traceplots and summary
library(MCMCvis)
MCMCtrace(MEsamples, params = MEmons, Rhat = T, n.eff = T, ind = T, pdf = F,
          gvals = params, priors = rbeta(n.chains * n.iter, 1, 1))
MEsum <- 
  MCMCsummary(lapply(MEsamples, function(x) x[-(1:n.burnin),]),
              params = MEmons, HPD = T) |>
  print()
```

## Posterior distributions

The input values of the simulation are not recovered within the posterior distributions of model parameters. We summarized posteriors as medians and 95% highest posterior density intervals (HPDIs) after omitting the first `r n.burnin` MCMC samples as burn-in.
\ 

```{r}
#| echo: false
#| output: true

library(tidyverse)

# Plot theme
theme_set(theme_classic())
theme_update(axis.ticks = element_line(color = "#333333"),
             axis.line = element_line(color = "#333333"),
             text = element_text(color = "#333333"),
             axis.text = element_text(color = "#333333"))

# Parameter names
params.names <- c("pi", "phi1", "phi2.alpha", "phi.beta", "psi12", "psi21", "p1", "p2", 
                  "r.delta", "delta21", "r.lambda", "lambda21", "(log) mu", "mu.sigma[1]",
                  "mu.sigma[2]", "mu.sigma[3]")

# Plot
MCMCsummary(lapply(MEsamples, function(x) x[-(1:n.burnin),]),
            round = 3, params = MEmons, func = median, HPD = T) |>
  mutate(parameter = factor(params.names, levels = params.names),
         sim = params) |>
  ggplot(aes(x = parameter)) +
  geom_hline(yintercept = 0,
             linetype = "dashed",
             color = "grey50") +
  geom_pointrange(aes(y = func, ymin = `95%_HPDL`, ymax = `95%_HPDU`),
                  shape = 16,
                  color = "#333333",
                  position = position_nudge(x = 0.15)) +
  geom_point(aes(y = sim),
             shape = 16,
             color = "#a4260f",
             alpha = 0.8,
             position = position_nudge(x = -0.15)) +
  labs(title = "Parameter estimates",
       subtitle = "Posterior distributions (median and 95% HPDI, black) with input (red)",
       x = "Parameter",
       y = "Estimate") +
  coord_flip() +
  scale_x_discrete(limits = rev(params.names))
```

\newpage

# References
