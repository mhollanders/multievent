---
title: "Appendix S1. Extended multievent model: Arnason-Schwarz in continuous-time"
author: | 
  | Matthijs Hollanders & J. Andrew Royle
  |
  | Manuscript title: Know what you don't know: Embracing state uncertainty in disease-structured multistate models
format:
  pdf:
    toc: true
editor_options:
  chunk_output_type: console
bibliography: multievent.bib
csl: methods-in-ecology-and-evolution.csl
nocite: |
  @wickham2016, @pederson2020
geometry: margin = 1in
fontsize: 10pt
execute:
  output: false
  warning: false
  message: false
header-includes: |
  \usepackage{titling}
  \pretitle{\begin{flushleft}\Large\bfseries}
  \posttitle{\end{flushleft}}  
  \preauthor{\begin{flushleft}\large}
  \postauthor{\end{flushleft}} 
---

```{r}
#| echo: false

options(scipen = 999, digits = 3)
```

\newpage

# Introduction

In the first section, we simulate multievent mark-recapture Arnason-Schwarz [@arnason1972; @arnason1973; @schwarz1993; @pradel2005] data for animals with two pathogen infection states using R 4.2.0 [@rcoreteam2022]. We simulate the ecological process, consisting of survival and infection state transitions, in continuous-time with hazard rates and unequal time intervals [@glennie2022]. The observation process is simulated according to the robust design with multiple secondary surveys during primary occasions of assumed closure. For each capture during a secondary survey, samples (e.g., swabs) are collected from individuals to detect the pathogen, which happens imperfectly. Each sample is subjected to multiple diagnostic runs (e.g., qPCR), which also features imperfect pathogen detection, yielding infection status (binary) and infection intensity (continuous) data.

In the second section, we demonstrate how to analyze datasets with Bayesian inference and Markov chain Monte Carlo (MCMC) methods using NIMBLE 0.12.3 [@devalpine2017; @devalpine2022]. We write the model code in the NIMBLE dialect of the BUGS language (which is easily adapted to work in BUGS or JAGS), generate suitable initial values for latent ecological and observed states, and condense the diagnostic run infection intensities to "long" format. We then run the MCMC, show traceplots and summary statistics, and plot the parameter estimates with the simulated values.

\newpage

# Simulating data

We simulate individuals experiencing changes in their in ecological states (*z*), observed states (*o*) conditional on these ecological states, and diagnostic run states (*y*) conditional on the observed states. Ecological states (*z*) are (1) alive and uninfected, (2) alive and infected, and (3) dead [@kery2012b]. Individuals can transition between these states, represented by survival (conditional on infection intensity) and infection state transitions. Observed states (*o*) are (1) seen/captured and uninfected, (2) seen/captured and infected, (3) and not seen/captured. For every sample, multiple diagnostic runs are conducted which let us estimate the probability of detecting an infection on an infected sample. There are three diagnostic run states (*y*): (1) uninfected, (2) infected, and (3) no diagnostic run, the last of which is only possible when there is no sample collected and therefore no capture of an individual. Pathogen detection probabilities on samples and diagnostic runs are modeled with occupancy-like submodels [multiple sample units with replicated measurements, @mackenzie2002] conditional on infection intensity. We simulate the occurrence of false-positives in both the sampling and diagnostic processes.

## Input parameters

We specify the sampling condition and define parameter values for the simulation. 

```{r}
# Number of ecological (z, latent), observed (o, latent), and diagnostic (y) states
n.states <- 3

# Sampling conditions
n.ind <- 200             # Number of individuals in simulation
n.prim <- 8              # Number of primary survey occasions   
n.sec <- 3               # Number of secondary survey occasions (per primary)
n.diag <- 3              # Number of diagnostic runs (per sample)
tau <-                   # Primary occasion intervals
  rlnorm(n.prim - 1, log(1), 0.5)

# Parameters
pi <- 0.4                # Probability of entering the study as infected
phi1 <- 0.1              # Mortality hazard rate if uninfected
phi2.alpha <- 0.1        # Mortality hazard rate if infected (intercept)
phi.beta <- 0.3          # Effect of one "unit" of pathogen on mortality hazard (log hazard)
psi12 <- 1.0             # Hazard rate of gaining infection (force-of-infection)
psi21 <- 0.5             # Hazard rate of clearing infection
p1 <- 0.6                # Recapture probability if uninfected
p2 <- 0.7                # Recapture probability if infected
r.delta <- 0.4           # Probability of detecting one "unit" of pathogen on a sample
delta21 <- 0.05          # False-positive probability of sampling process (e.g., swab)
r.lambda <- 0.6          # Probability of detecting one "unit" of pathogen on a diagnostic run 
lambda21 <- 0.10         # False-positive probability of diagnostic process (e.g., qPCR)
mu <- 4.0                # Average population infection intensity
mu.sigma <-              # Population, sampling process, and diagnostic process infection 
  c(0.4, 0.3, 0.2)       # intensity standard deviations
```

## Transition probability matrices

We start with creating the transition probability matrices (TPMs) of the ecological, observation, and diagnostic processes. We create the ecological process TPM by taking the matrix exponential of the transition rate matrix (TRM) multiplied by the (unequal) primary occasion intervals [@miller2008; @conn2012; @goulet2021; @glennie2022]. The TRM consists of mortality rates and rates of infection state transitions, and we simulate the mortality hazard rate of infected individuals (${\phi_2}_{it}$) as a log-linear function of infection intensity [@ergon2018]. We simulate the pathogen detection probabilities (${\delta_{22}}_{it}$ and ${\lambda_{22}}_{it}$) following abundance-induced heterogeneity models [@royle2003; @lachish2012]. Note that, because Arnason-Schwarz models condition on first capture, we do not model the capture probabilities within the first primary occasion. For the secondaries in that primary that an individual was captured, the observation process consists solely of the sample pathogen detection process, analogous to fixing these capture probabilities to 1.

```{r}
# Arrays for ecological, observation, and diagnostic process TRM/TPMs
TRM.z <- TPM.z <- array(NA, c(n.states, n.states, n.ind, n.prim - 1))
TPM.o <- array(NA, c(n.states, n.states, n.ind, n.prim))
TPM.d <- array(NA, c(n.states, n.states, n.ind, n.prim, n.sec))

# Arrays for mortality, pathogen detection, and infection intensities
phi2 <- array(NA, c(n.ind, n.prim - 1))
m <- delta22 <- array(NA, c(n.ind, n.prim))
n <- lambda22 <- array(NA, c(n.ind, n.prim, n.sec))

# Primary occasion that individuals were first captured
first <- sort(sample(1:(n.prim - 1), n.ind, replace = T))

# TPMs
for (i in 1:n.ind) {
  for (t in first[i]:n.prim) {
    
    # Individual infection intensity (lognormal)
    m[i,t] <- rlnorm(1, log(mu), mu.sigma[1])
    
    # Sample pathogen detection
    delta22[i,t] <- 1 - (1 - r.delta) ^ m[i,t]
    
  } # t
  
  # Observation process TPM for first capture
  TPM.o[,,i,first[i]] <-
    matrix(c(1 - delta21,             delta21,             0,
             1 - delta22[i,first[i]], delta22[i,first[i]], 0,
             0,                       0,                   1),
           nrow = n.states, ncol = n.states, byrow = T)
  
  for (t in first[i]:(n.prim - 1)) {
    
    # Mortality hazard rate as a function of infection intensity
    phi2[i,t] <- exp(log(phi2.alpha) + phi.beta * m[i,t])
    
    # Ecological process TRM (transition rate matrix)
    TRM.z[,,i,t] <- 
      matrix(c(-(psi12 + phi1), psi12,                phi1,
               psi21,           -(psi21 + phi2[i,t]), phi2[i,t],
               0,               0,                    0),
             nrow = n.states, ncol = n.states, byrow = T)
    
    # Ecological process TPM (transition probability matrix)
    TPM.z[,,i,t] <- expm::expm(TRM.z[,,i,t] * tau[t])
    
    # Observation process TPM
    TPM.o[,,i,t+1] <- 
      matrix(c(p1 * (1 - delta21),        p1 * delta21,        1 - p1,
               p2 * (1 - delta22[i,t+1]), p2 * delta22[i,t+1], 1 - p2,
               0,                         0,                   1), 
             nrow = n.states, ncol = n.states, byrow = T)

  } # t
  
  for (t in first[i]:n.prim) {
    for (k in 1:n.sec) {
      
      # Sample infection intensity
      n[i,t,k] <- rnorm(1, m[i,t], mu.sigma[2])
      
      # Diagnostic pathogen detection
      lambda22[i,t,k] <- 1 - (1 - r.lambda) ^ n[i,t,k]
      
      # Diagnostic process TPM
      TPM.d[,,i,t,k] <- 
        matrix(c(1 - lambda21,        lambda21,        0,
                 1 - lambda22[i,t,k], lambda22[i,t,k], 0,
                 0,                   0,               1), 
               nrow = n.states, ncol = n.states, byrow = T)

    } # k
  } # t
} # i
```

## Generating capture histories

We run the simulation, which yields the 4-dimensional capture histories (*y*) and associated infection intensities (*x*) that we use as data for the model.

```{r}
# Arrays for ecological, observed, and diagnostic states, and infection intensities
z <- array(NA, c(n.ind, n.prim))
o <- array(NA, c(n.ind, n.prim, n.sec))
y <- x <- array(NA, c(n.ind, n.prim, n.sec, n.diag))

# Secondary surveys that individuals were first captured
first.sec <- sample(1:n.sec, n.ind, replace = T)

# We start using NIMBLE's functionality here with the rcat() function
library(nimble)

# Simulation
for (i in 1:n.ind) {
  
  # Ecological state at first capture
  z[i,first[i]] <- rcat(1, c(1 - pi, pi))
  
  # Observed state during secondary of first capture
  o[i,first[i],first.sec[i]] <- rcat(1, TPM.o[z[i,first[i]],,i,first[i]])
  
  # Not seen during other secondaries
  for (k in 1:n.sec) {
    if (is.na(o[i,first[i],k])) {
      o[i,first[i],k] <- 3
    }
  } # k
  
  for (t in (first[i] + 1):n.prim) {
    
    # Ecological process
    z[i,t] <- rcat(1, TPM.z[z[i,t-1],,i,t-1])
    
    for (k in 1:n.sec) {
      
      # Observation process
      o[i,t,k] <- rcat(1, TPM.o[z[i,t],,i,t])
      
    } # k
  } # t
  
  for (t in first[i]:n.prim) {
    for (k in 1:n.sec) {
      for (l in 1:n.diag) {
        
        # Diagnostic process
        y[i,t,k,l] <- rcat(1, TPM.d[o[i,t,k],,i,t,k])
        
        # Diagnostic run infection intensity
        if (y[i,t,k,l] == 2) {
          x[i,t,k,l] <- rnorm(1, n[i,t,k], mu.sigma[3])
        }
        
      } # l
    } # k
  } # t
} # i
```

\newpage

# Extended multievent model

## Model code

We write the model code using NIMBLE. We specify vague Beta and Exponential priors and weakly informative (half-)Cauchy priors for parameters, define functions for model parameters, write out the TPMs, specify the likelihood for the multievent model, and use "long" format without NAs for the infection intensity model. To calculate the ecological process TPM from the TRM, we use $\mathbf{TPM.z} = e^{\mathbf{TRM.z}\tau} = \mathbf{V}e^{\mathbf{D}\tau}\mathbf{V^{-1}}$, where $\tau$ is a vector with the primary occasion intervals, $\mathbf{V}$ is the matrix of eigenvectors of $\mathbf{TRM.z}$, and $\mathbf{D}$ is the diagonal matrix of eigenvalues of $\mathbf{TRM.z}$ [@miller2008; @conn2012]. We use a mix of centered and non-centered parameterization for modeling infection intensities to improve MCMC mixing [@papaspiliopoulos2003]. Note that all parameters can be modeled as functions of covariates with appropriate link functions.

```{r}
MEcode <- nimbleCode({
  
  # PRIORS
  
  # Constrain false-positive and true-positive probabilities to avoid multimodality
  constraint ~ dconstraint(delta21 < r.delta & lambda21 < r.lambda)
  
  # Multievent
  pi.alpha ~ dbeta(1, 1)
  phi1.alpha ~ dexp(1)
  phi2.alpha ~ dexp(1)
  phi.beta ~ dt(0, sigma = 1, df = 1)
  psi12.alpha ~ dexp(1)
  psi21.alpha ~ dexp(1)
  p1.alpha ~ dbeta(1, 1)
  p2.alpha ~ dbeta(1, 1)
  r.delta ~ dbeta(1, 1)
  delta21 ~ dbeta(1, 1)  
  r.lambda ~ dbeta(1, 1)
  lambda21 ~ dbeta(1, 1)  
  
  # Infection intensity
  mu.alpha ~ dt(mu.prior, sigma = 1, df = 1)
  for (i in 1:3) {
    mu.sigma[i] ~ T(dt(0, sigma = 1, df = 1), 0, )
  }
  
  # PARAMETERS
    
  for (i in 1:n.ind) {
    
    # Probability of entering as infected
    pi[i] <- pi.alpha
    
    for (t in first[i]:(n.prim - 1)) {
      
      # Mortality hazard rates
      phi1[i,t] <- phi1.alpha
      log(phi2[i,t]) <- log(phi2.alpha) + phi.beta * m[i,t]
      
      # Infection state transition hazard rates
      psi12[i,t] <- psi12.alpha
      psi21[i,t] <- psi21.alpha
      
      for (k in 1:n.sec) {
        
        # Recapture probabilities
        p1[i,t+1,k] <- p1.alpha
        p2[i,t+1,k] <- p2.alpha
        
      } # k
    } # t
      
    # Recapture probabilities at first capture (p = 1 if captured during secondaries)
    p1[i,first[i],1:n.sec] <- p.first[i,first[i],1:n.sec]
    p2[i,first[i],1:n.sec] <- p.first[i,first[i],1:n.sec]
    
    for (t in first[i]:n.prim) {
      
      # Population infection intensity
      mu[i,t] <- mu.alpha
      
      # Individual infection intensity (lognormal)
      m[i,t] ~ dlnorm(mu[i,t], sdlog = mu.sigma[1])     # Centered parameterization
#      m.z[i,t] ~ dnorm(0, 1)
#      log(m[i,t]) <- mu[i,t] + m.z[i,t] * mu.sigma[1]  # Non-centered parameterization
      
      # Sample pathogen detection
      delta22[i,t] <- 1 - (1 - r.delta) ^ m[i,t]
      
      for (k in 1:n.sec) {
        
        # Sample infection intensity
#        n[i,t,k] ~ dnorm(m[i,t], sd = mu.sigma[2])    # Centered parameterization
        n.z[i,t,k] ~ dnorm(0, 1)
        n[i,t,k] <- m[i,t] + n.z[i,t,k] * mu.sigma[2]  # Non-centered parameterization
        
        # Diagnostic pathogen detection
        lambda22[i,t,k] <- 1 - (1 - r.lambda) ^ n[i,t,k]
        
      } # k
    } # t
    
    # TRANSITION PROBABILITY MATRICES
    
    # ECOLOGICAL PROCESS (mortality and infection state transitions)
    
    # First capture
    TPM.z.first[1,i] <- 1 - pi[i]  # Enters as uninfected
    TPM.z.first[2,i] <- pi[i]      # Enters as infected
    
    for (t in first[i]:(n.prim - 1)) {
      
      # Transition rate matrix
      
      # Alive, uninfected
      TRM.z[1,1,i,t] <- -(psi12[i,t] + phi1[i,t])  # Remains uninfected
      TRM.z[1,2,i,t] <- psi12[i,t]                 # Transitions to infected
      TRM.z[1,3,i,t] <- phi1[i,t]                  # Dies
      
      # Alive, infected
      TRM.z[2,1,i,t] <- psi21[i,t]                 # Transitions to uninfected
      TRM.z[2,2,i,t] <- -(psi21[i,t] + phi2[i,t])  # Remains infected
      TRM.z[2,3,i,t] <- phi2[i,t]                  # Dies
      
      # Dead
      TRM.z[3,1,i,t] <- 0                          # Transitions to uninfected
      TRM.z[3,2,i,t] <- 0                          # Transitions to infected 
      TRM.z[3,3,i,t] <- 0                          # Remains dead
      
      # Matrix of eigenvectors of TRM.z
      V[1:3,1:3,i,t] <- eigen(TRM.z[1:3,1:3,i,t])$vectors
      
      # Diagonal matrix of eigenvalues of TRM.z
      D[1:3,1:3,i,t] <- diag(eigen(TRM.z[1:3,1:3,i,t])$values)
      
      # Matrix exponential of D * primary occasion intervals
      expDtau[1,1,i,t] <- exp(D[1,1,i,t] * tau[t])
      expDtau[1,2,i,t] <- 0
      expDtau[1,3,i,t] <- 0
      expDtau[2,1,i,t] <- 0
      expDtau[2,2,i,t] <- exp(D[2,2,i,t] * tau[t])
      expDtau[2,3,i,t] <- 0
      expDtau[3,1,i,t] <- 0
      expDtau[3,2,i,t] <- 0
      expDtau[3,3,i,t] <- exp(D[3,3,i,t] * tau[t])
      
      # Transition probability matrix
      TPM.z[1:3,1:3,i,t] <- V[1:3,1:3,i,t] %*% expDtau[1:3,1:3,i,t] %*% inverse(V[1:3,1:3,i,t])

    } # t
    
    for (t in first[i]:n.prim) {
      for (k in 1:n.sec) {
              
        # OBSERVATION PROCESS (recapture and sample pathogen detection)
        
        # Alive, uninfected
        TPM.o[1,1,i,t,k] <- p1[i,t,k] * (1 - delta21)       # Seen, uninfected (true -)
        TPM.o[1,2,i,t,k] <- p1[i,t,k] * delta21             # Seen, infected (false +)
        TPM.o[1,3,i,t,k] <- 1 - p1[i,t,k]                   # Not seen
      
        # Alive, infected
        TPM.o[2,1,i,t,k] <- p2[i,t,k] * (1 - delta22[i,t])  # Seen, uninfected (false -)
        TPM.o[2,2,i,t,k] <- p2[i,t,k] * delta22[i,t]        # Seen, infected (true +)
        TPM.o[2,3,i,t,k] <- 1 - p2[i,t,k]                   # Not seen
      
        # Dead
        TPM.o[3,1,i,t,k] <- 0                               # Seen, uninfected
        TPM.o[3,2,i,t,k] <- 0                               # Seen, infected
        TPM.o[3,3,i,t,k] <- 1                               # Not seen
        
        # DIAGNOSTIC PROCESS (diagnostic pathogen detection)
        
        # Seen, uninfected
        TPM.d[1,1,i,t,k] <- 1 - lambda21         # Uninfected (true -)
        TPM.d[1,2,i,t,k] <- lambda21             # Infected (false +)
        TPM.d[1,3,i,t,k] <- 0                    # No diagnostic run
        
        # Seen, infected
        TPM.d[2,1,i,t,k] <- 1 - lambda22[i,t,k]  # Uninfected (false -)
        TPM.d[2,2,i,t,k] <- lambda22[i,t,k]      # Infected (true +)
        TPM.d[2,3,i,t,k] <- 0                    # No diagnostic run
        
        # Not seen
        TPM.d[3,1,i,t,k] <- 0                    # Uninfected
        TPM.d[3,2,i,t,k] <- 0                    # Infected
        TPM.d[3,3,i,t,k] <- 1                    # No diagnostic run 
        
      } # k
    } # t
    
    # LIKELIHOOD
    
    # Ecological state at first capture
    z[i,first[i]] ~ dcat(TPM.z.first[1:2,i])

    for (t in (first[i] + 1):n.prim) {
      
      # Ecological process
      z[i,t] ~ dcat(TPM.z[z[i,t-1],1:3,i,t-1])

    } # t
    
    for (t in first[i]:n.prim) {
      for (k in 1:n.sec) {  
        
        # Observation process
        o[i,t,k] ~ dcat(TPM.o[z[i,t],1:3,i,t,k])
        
        for (l in 1:n.diag) {
          
          # Diagnostic process
          y[i,t,k,l] ~ dcat(TPM.d[o[i,t,k],1:3,i,t,k])
          
        } # l
      } # k
    } # t
  } # i
  
  # INFECTION INTENSITY
  
  for (j in 1:n.x) {

    # Likelihood
    x[j] ~ dnorm(n[ind[j],prim[j],sec[j]], sd = mu.sigma[3])
    
  }
  
})
```

## Initial values for latent ecological and observed states

We generate suitable initial values for latent ecological (*z*) and observed (*o*) states from our diagnostic capture history (*y*).

```{r}
# Lowest observed state per individual per primary
observed <- apply(y, 1:2, function(x) min(x, na.rm = T))

# First and last captures
first.cap <- apply(observed, 1, function(x) min(which(x < 3)))
last.cap <- apply(observed, 1, function(x) max(which(x < 3)))

# Observed states
o.init <- array(NA, c(n.ind, n.prim, n.sec))
for (i in 1:n.ind) {
  for (t in first.cap[i]:n.prim) {
    for (k in 1:n.sec) {
      o.init[i,t,k] <- 
        # If missing survey, individual is "not captured"
        ifelse(length(which(is.na(y[i,t,k,]))) == n.diag, 3,
               # If no diagnostic runs, individual is "not captured"
               ifelse(min(y[i,t,k,], na.rm = T) == 3, 3,
                      # Otherwise, assign highest observed diagnostic state
                      max(y[i,t,k,][y[i,t,k,] < 3], na.rm = T)))
    } # k
  } # t
} # i

# Ecological states
z.init <- array(NA, c(n.ind, n.prim))
for (i in 1:n.ind) {
  for (t in first.cap[i]:last.cap[i]) {
    z.init[i,t] <- 
      # If not captured during primary, randomly assign an alive state
      ifelse(min(o.init[i,t,]) == 3, sample(1:2, 1),
             # If captured, assign highest observed state
             max(o.init[i,t,][o.init[i,t,] < 3]))
  } # t
  # If not captured during the last survey
  if (last.cap[i] < n.prim) {
    # Assign "dead" state after last capture
    for (t in (last.cap[i] + 1):n.prim) {
      z.init[i,t] <- 3
    } # t
  }
} # i
```

## Composing infection intensity data

We convert our 4-dimensional infection intensity array (*x*) into tidy ("long") format without NAs to improve MCMC mixing and speed.

```{r}
x.long <- 
  reshape2::melt(x,
                 value.name = "x", 
                 varnames = c("ind", "prim", "sec", "diag")) |>
  na.omit()
```

## Data, constants, initial values, and parameters to monitor

We package the data, constants, initial values, and parameters to monitor to feed to NIMBLE.

```{r}
#| output: true

# Data
str(MEdata <- list(y = y,
                   x = x.long$x,
                   constraint = 1))

# Constants
mu.prior <- median(log(x), na.rm = T)
str(MEconsts <- list(# Multievent
                     n.ind = dim(y)[1],
                     n.prim = dim(y)[2],
                     n.sec = dim(y)[3],
                     n.diag = dim(y)[4],
                     tau = tau,
                     first = first.cap,
                     p.first = apply(o.init, 1:3, function(x) length(which(x < 3))),
                     
                     # Infection intensity
                     n.x = nrow(x.long),
                     ind = x.long$ind,
                     prim = x.long$prim,
                     sec = x.long$sec,
                     mu.prior = mu.prior))

# Initial values for latent states, pathogen detection, and infection intensity
MEinits <- list(z = z.init, o = o.init,
                r.delta = runif(1, 0.5, 1), delta21 = runif(1, 0, 0.5),
                r.lambda = runif(1, 0.5, 1), lambda21 = runif(1, 0, 0.5),
                mu.alpha = mu.prior, mu.sigma = runif(3))

# Parameters to monitor
MEmons <- c("pi.alpha", "phi1.alpha", "phi2.alpha", "phi.beta", 
            "psi12.alpha", "psi21.alpha", "p1.alpha", "p2.alpha", 
            "r.delta", "delta21", "r.lambda", "lambda21",
            "mu.alpha", "mu.sigma")
```

## Run model

We run the model with NIMBLE's default MCMC configuration, and we thin the MCMC samples for infection intensities to reduce memory use.

```{r}
MEstart <- Sys.time()
# Model
MEmodel <- nimbleModel(MEcode, MEconsts, MEdata, MEinits, calculate = F, check = F)
cMEmodel <- compileNimble(MEmodel)

# MCMC
MEconf <- configureMCMC(MEmodel, monitors = MEmons, monitors2 = c("m", "n"))
MEmcmc <- buildMCMC(MEconf)
cMEmcmc <- compileNimble(MEmcmc, project = cMEmodel)

# Run MCMC
n.chains <- 3 ; n.iter <- 5000 ; n.burnin <- 1000 ; n.thin = 5
MEsamples <- runMCMC(cMEmcmc, nchains = n.chains, niter = n.iter, thin2 = n.thin)
MEend <- Sys.time()
```

```{r}
#| output: true

MEend - MEstart
```

\newpage

# Results

## Traceplots and summary statistics

We see that parameters mix well and that convergence is achieved quickly [@youngflesh2018mcmcvis], with low percent overlap between the prior and posterior distributions (PPO), suggestive of good identifiability [@gimenez2009]. Note that for `MCMCsummary`, we omitted the first `r n.burnin` MCMC samples as burn-in. The red horizontal lines in the density plots are Beta(1, 1) priors, which were used for all probabilities, and the red dashed lines mark the simulation input parameter values. 

```{r}
#| output: true

# Parameters
params <- c(pi, phi1, phi2.alpha, phi.beta, psi12, psi21, p1, p2, 
            r.delta, delta21, r.lambda, lambda21, log(mu), mu.sigma)

# Traceplots and summary
library(MCMCvis)
MCMCtrace(MEsamples$samples, params = MEmons, Rhat = T, n.eff = T, ind = T, pdf = F,
          gvals = params, priors = rbeta(n.chains * n.iter, 1, 1))
MEsum <- 
  MCMCsummary(lapply(MEsamples$samples, function(x) x[-(1:n.burnin),]), 
              params = MEmons, HPD = T) |>
  print()
```

## Posterior distributions

The input values of the simulation are recovered well within the posterior distributions of model parameters. We summarized posteriors as medians and 95% highest posterior density intervals (HPDIs) after omitting the first `r n.burnin` MCMC samples as burn-in.
\ 

```{r}
#| echo: false
#| output: true

library(tidyverse)

# Plot theme
theme_set(theme_classic())
theme_update(axis.ticks = element_line(color = "#333333"),
             axis.line = element_line(color = "#333333"),
             text = element_text(color = "#333333"),
             axis.text = element_text(color = "#333333"))

# Parameter names
params.names <- c("pi", "phi1", "phi2.alpha", "phi.beta", "psi12", "psi21", "p1", "p2", 
                  "r.delta", "delta21", "r.lambda", "lambda21", "(log) mu", "mu.sigma[1]",
                  "mu.sigma[2]", "mu.sigma[3]")

# Plot
MCMCsummary(lapply(MEsamples$samples, function(x) x[-(1:n.burnin),]),
            round = 3, params = MEmons, func = median, HPD = T) |>
  mutate(parameter = factor(params.names, levels = params.names),
         sim = params) |>
  ggplot(aes(x = parameter)) +
  geom_hline(yintercept = 0,
             linetype = "dashed",
             color = "grey50") +
  geom_pointrange(aes(y = func, ymin = `95%_HPDL`, ymax = `95%_HPDU`),
                  shape = 16,
                  color = "#333333",
                  position = position_nudge(x = 0.15)) +
  geom_point(aes(y = sim),
             shape = 16,
             color = "#a4260f",
             alpha = 4/5,
             position = position_nudge(x = -0.15)) +
  labs(title = "Parameter estimates",
       subtitle = "Posterior distributions (median and 95% HPDI, black) with input (red)",
       x = "Parameter",
       y = "Estimate") +
  coord_flip() +
  scale_x_discrete(limits = rev(params.names))
```

## Infection intensities

We also assess how well infection intensities are recovered by the model. First, for each secondary that a recaptured individual returned at least one positive diagnostic run, we collect the true values and extract the estimates (posterior modes) for individual and sample infection intensities.

```{r}
# Burn-in for intensities
n.burnin2 <- n.burnin / n.thin

# True sample intensities of observed individuals
n.true <- n[o.init == 2]

# Remove NAs for MCMCsummary() to work
MEsamples2 <- lapply(MEsamples$samples2, function(x) ifelse(is.na(x), 0, x))

# Estimated sample intensities of observed individuals
n.est <- 
  array(MCMCsummary(lapply(MEsamples2, function(x) x[-(1:n.burnin2),]), 
                    params = "n")$`50%`,
        c(n.ind, n.prim, n.sec))[o.init == 2]

# Observed infected individuals 
z.est <- apply(o.init, 1:2, function(x) max(x[x < 3]))

# True individual intensities of observed individuals
m.true <- m[z.est == 2]

# Estimated individual intensities of observed individuals
m.est <- 
  array(MCMCsummary(lapply(MEsamples2, function(x) x[-(1:n.burnin2),]), 
                    params = "m")$`50%`,
        c(n.ind, n.prim))[z.est == 2]
```

We plot posterior medians against true infection intensities for individuals and samples. The diagonal lines indicate perfect agreement between posteriors and the true values.

\ 

```{r}
#| echo: false
#| output: true

# Intensities
loads <- 
  tibble(true = c(m.true, n.true),
         estimated = c(m.est, n.est),
         type = factor(c(rep("Individual", length(m.true)), rep("Sample", length(n.true)))))

# Axis limits
ax.break <- round(max(n.true, na.rm = T) / 4)
ax.lim <- floor(max(n.true, na.rm = T) / ax.break) * ax.break

# Individual
m.plot <-
  loads |>
  filter(type == "Individual") |>
  ggplot(aes(x = true, y = estimated)) +
  geom_abline(alpha = 1/2) +
  geom_point(color = "#df5a00",
             shape = 16,
             alpha = 1/4) +
  scale_x_continuous(breaks = seq(ax.break, ax.lim, ax.break),
                     limits = c(0, max(n.true, na.rm = T) + 0.5),
                     expand = c(0, 0)) +
  scale_y_continuous(breaks = seq(ax.break, ax.lim, ax.break),
                     limits = c(0, max(n.true, na.rm = T) + 0.5),
                     expand = c(0, 0)) +
  coord_fixed() +
  labs(subtitle = "Individual infection intensities",
       x = "True",
       y = "Estimate (posterior median)")

# Sample
n.plot <-
  loads |>
  filter(type == "Sample") |>
  ggplot(aes(x = true, y = estimated)) +
  geom_abline(alpha = 1/2) +
  geom_point(color = "#023059",
             shape = 16,
             alpha = 1/4) +
  scale_x_continuous(breaks = seq(ax.break, ax.lim, ax.break),
                     limits = c(0, max(n.true, na.rm = T) + 0.5),
                     expand = c(0, 0)) +
  scale_y_continuous(breaks = seq(ax.break, ax.lim, ax.break),
                     limits = c(0, max(n.true, na.rm = T) + 0.5),
                     expand = c(0, 0)) +
  coord_fixed() +
  labs(subtitle= "Sample infection intensities",
       x = "True",
       y = "Estimate (posterior median)")

library(patchwork)
m.plot | n.plot
```

\newpage

# References
